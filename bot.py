
import logging
import os
import json
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    ConversationHandler,
    filters,
)
import gspread
from oauth2client.service_account import ServiceAccountCredentials

TOKEN = "8128628004:AAEGqc1kIvZV-z3jh3VPkvTyWVlEEd01wLA"
LOGIN, WEEK = range(2)

SCOPE = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
GOOGLE_CREDENTIALS = json.loads(os.environ.get("GOOGLE_CREDENTIALS", "{}"))
CREDS = ServiceAccountCredentials.from_json_keyfile_dict(GOOGLE_CREDENTIALS, SCOPE)
client = gspread.authorize(CREDS)

SPREADSHEET_URL = "https://docs.google.com/spreadsheets/d/1TI1VGYBDvsRinBVHAPf1wZDvBN-rRCW_Fic6Q9-5nqA/edit?usp=sharing"

logging.basicConfig(level=logging.INFO)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç –∫–æ–ª–ª–µ–≥–∞! –Ø –º–æ–≥—É –ø–æ–∫–∞–∑–∞—Ç—å —Ç–≤–æ–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞ –Ω–µ–¥–µ–ª—é.\n"
        "–î–ª—è –Ω–∞—á–∞–ª–∞ –¥–∞–π –º–Ω–µ —Å–≤–æ–π –ª–æ–≥–∏–Ω. –ü–∏—à–∏ –Ω–∏–∂–Ω–∏–º —Ä–µ–≥–∏—Å—Ç—Ä–æ–º ‚Äî —Ç–∞–∫ –º–Ω–µ –±—É–¥–µ—Ç –ø—Ä–æ—â–µ."
    )
    return LOGIN

async def get_login(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    login = update.message.text.strip().lower()
    context.user_data["login"] = login
    await update.message.reply_text(
        f"–û—Ç–ª–∏—á–Ω–æ, {login}. –¢–µ–ø–µ—Ä—å —Å–∫–∞–∂–∏ –º–Ω–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–∞–∫–æ–π –Ω–µ–¥–µ–ª–∏ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç, –≤ —Ñ–æ—Ä–º–∞—Ç–µ W1."
    )
    return WEEK

async def get_week(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    week = update.message.text.strip().upper()
    login = context.user_data.get("login")
    try:
        sheet = client.open_by_url(SPREADSHEET_URL)
    except Exception as e:
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Ç–∞–±–ª–∏—Ü–µ.")
        logging.error(e)
        return ConversationHandler.END

    found = False
    result_message = ""
    for worksheet in sheet.worksheets():
        try:
            records = worksheet.get_all_records()
            for row in records:
                if row.get("login", "").lower() == login and row.get("week", "").upper() == week:
                    found = True
                    result_message += f"\nüìÑ –õ–∏—Å—Ç: *{worksheet.title}*\n"
                    for key, value in row.items():
                        if key.lower() not in ["week", "login"]:
                            result_message += f"‚Ä¢ {key}: {value}\n"
        except Exception as e:
            logging.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ª–∏—Å—Ç–∞ {worksheet.title}: {e}")

    if found:
        await update.message.reply_text(result_message.strip(), parse_mode="Markdown")
    else:
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –ª–æ–≥–∏–Ω—É –∏ –Ω–µ–¥–µ–ª–µ.")
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("–û–∫–µ–π, –æ—Ç–º–µ–Ω–∞.")
    return ConversationHandler.END

def main():
    application = ApplicationBuilder().token(TOKEN).build()
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            LOGIN: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_login)],
            WEEK: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_week)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )
    application.add_handler(conv_handler)
    application.run_polling()

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
